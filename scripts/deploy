
#!/bin/bash
set -e

WORKSPACE=${1}

_scripts="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
_app="${_scripts}/.."
_terraform="${_app}/infrastructure/terraform"

# import base properties, e.g. APP_NAME
set -o allexport; source "${_app}/.env.base"; set +o allexport


if [ -z ${WORKSPACE+x} ]; then
  echo "Must supply environment name";
  exit 1
fi

if [ -z ${APP_NAME+x} ]; then
  echo "Must supply APP_NAME (should be in .env)";
  exit 1
fi


case "$WORKSPACE" in
  dev)
    WORKSPACE="dev"
    TF_VAR_BOT_TOKEN="${BOT_TOKEN_TEST}"
    VAR_FILE=${2:-"./env_configs/dev.tfvars"}
    set -o allexport; source "${_app}/.env.dev"; set +o allexport
    ;;
  prod)
    WORKSPACE="prod"
    TF_VAR_BOT_TOKEN="${BOT_TOKEN}"
    VAR_FILE=${2:-"./env_configs/prod.tfvars"}
    set -o allexport; source "${_app}/.env.prod"; set +o allexport
    ;;
  *)
    echo $"Usage: $0 {dev|prod}"
    exit 1
esac

VAR_FILE=${2:-"../env_configs/${WORKSPACE}.tfvars"}

# Terraform state, bucket name
AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
terraform_state_bucket="terraform-remote-$AWS_ACCOUNT_ID"

# Build
pushd "${_app}" >/dev/null
if [ "$CI" != true ] ; then
    npm run build
    # ${_scripts}/bundle_lambda
    # ${_scripts}/get_layer
fi
popd >/dev/null

# Cleanup .terraform
pushd "${_terraform}" >/dev/null
rm -rf .terraform/

# Deploy terraform
terraform init \
  -backend-config bucket="${terraform_state_bucket}" \
  -backend-config="region=${TF_VAR_region:-us-west-2}" \
  -backend-config="key=${APP_NAME}" \
  >/dev/null

# If the workspace does not exist, create it.
if ! terraform workspace select ${WORKSPACE} >/dev/null; then
    terraform workspace new ${WORKSPACE}
fi

terraform_args=(
  -var-file=$VAR_FILE
)

if [ ! -z ${CI+x} ]; then
  terraform_args+=(-auto-approve)
fi

echo "Deploying"

TF_VAR_FIREBASE_64=$FIREBASE_64 \
TF_VAR_DISCORD_PUBLIC_KEY=$DISCORD_PUBLIC_KEY \
TF_VAR_BOT_TOKEN=$BOT_TOKEN \
TF_VAR_DISCORD_SERVER_ID=$DISCORD_SERVER_ID \
TF_VAR_DISCORD_RESIDENT_ROLE_ID=$DISCORD_RESIDENT_ROLE_ID \
TF_VAR_DISCORD_NEW_MEMBER_ROLE_ID=$DISCORD_NEW_MEMBER_ROLE_ID \
  terraform apply "${terraform_args[@]}"

popd